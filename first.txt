First(<START>) = {Terminal(string, None), Terminal(ε, None), Terminal(reserved_type_string, None), Terminal(reserved_func_read, None), Terminal(reserved_directive_if, None), Terminal(reserved_type_char, None), Terminal(reserved_func_print, None), Terminal(reserved_func_write, None), Terminal(number, None), Terminal(reserved_func_input, None), Terminal(reserved_directive_return, None), Terminal(char, None), Terminal(reserved_type_number, None), Terminal(initial_block, None), Terminal(id, None), Terminal(reserved_type_void, None), Terminal(reserved_directive_loop, None)}
First(<DECLARATION>) = {Terminal(reserved_type_string, None), Terminal(reserved_type_number, None), Terminal(reserved_type_char, None), Terminal(reserved_type_void, None)}
First(<SENTENCE>) = {Terminal(string, None), Terminal(ε, None), Terminal(reserved_type_string, None), Terminal(reserved_func_read, None), Terminal(reserved_directive_if, None), Terminal(reserved_type_char, None), Terminal(reserved_func_print, None), Terminal(reserved_func_write, None), Terminal(number, None), Terminal(reserved_func_input, None), Terminal(reserved_directive_return, None), Terminal(char, None), Terminal(reserved_type_number, None), Terminal(initial_block, None), Terminal(id, None), Terminal(reserved_type_void, None), Terminal(reserved_directive_loop, None)}
First(<EXPRESSION>) = {Terminal(string, None), Terminal(char, None), Terminal(reserved_func_input, None), Terminal(reserved_func_read, None), Terminal(id, None), Terminal(reserved_func_print, None), Terminal(reserved_func_write, None), Terminal(number, None), Terminal(initial_parenthesis, None)}
First(<BLOCK>) = {Terminal(initial_block, None)}
First(<TYPE>) = {Terminal(reserved_type_string, None), Terminal(reserved_type_number, None), Terminal(reserved_type_char, None), Terminal(reserved_type_void, None)}
First(<PARAMETERS>) = {Terminal(ε, None), Terminal(comma, None)}
First(<PARAMETER>) = {Terminal(reserved_type_string, None), Terminal(reserved_type_number, None), Terminal(reserved_type_char, None), Terminal(reserved_type_void, None)}
First(<FUNCTION_CALL>) = {Terminal(reserved_func_print, None), Terminal(reserved_func_read, None), Terminal(reserved_func_write, None), Terminal(reserved_func_input, None)}
First(<ADDITIONAL_PARAMETERS>) = {Terminal(ε, None), Terminal(comma, None)}
First(<LOOP>) = {Terminal(reserved_directive_loop, None)}
First(<CALLER>) = {Terminal(reserved_func_print, None), Terminal(reserved_func_read, None), Terminal(reserved_func_write, None), Terminal(reserved_func_input, None)}
First(<CONDITION_SEQUENCE>) = {Terminal(reserved_directive_if, None)}
First(<DECLARED_LOOP>) = {Terminal(reserved_type_string, None), Terminal(reserved_type_number, None), Terminal(reserved_type_char, None), Terminal(reserved_type_void, None)}
First(<ALTERNATIVE_CONDITIONS>) = {Terminal(ε, None), Terminal(reserved_directive_else, None)}
First(<ARGUMENTS>) = {Terminal(string, None), Terminal(ε, None), Terminal(char, None), Terminal(reserved_func_input, None), Terminal(reserved_func_read, None), Terminal(id, None), Terminal(reserved_func_print, None), Terminal(reserved_func_write, None), Terminal(number, None), Terminal(initial_parenthesis, None)}
First(<ID>) = {Terminal(id, None)}
First(<OP>) = {Terminal(op_logic_greater, None), Terminal(op_arit_sub, None), Terminal(op_logic_smaller, None), Terminal(op_arit_sum, None), Terminal(op_logic_equal, None), Terminal(op_logic_smaller_equal, None), Terminal(op_logic_greater_equal, None)}
First(<ALL_OPERATIONS>) = {Terminal(string, None), Terminal(reserved_func_print, None), Terminal(reserved_func_write, None), Terminal(char, None), Terminal(reserved_func_input, None), Terminal(reserved_func_read, None), Terminal(number, None), Terminal(id, None)}
First(<OPERATION>) = {Terminal(ε, None), Terminal(op_logic_equal, None), Terminal(op_logic_greater, None), Terminal(op_arit_sum, None), Terminal(op_arit_sub, None), Terminal(op_logic_smaller_equal, None), Terminal(op_logic_smaller, None), Terminal(op_logic_greater_equal, None)}
First(<OP'>) = {Terminal(op_arit_div, None), Terminal(op_arit_mult, None)}
First(<ALL_OPERATIONS'>) = {Terminal(ε, None), Terminal(op_logic_equal, None), Terminal(op_logic_greater, None), Terminal(op_logic_smaller, None), Terminal(op_attr, None), Terminal(op_logic_greater_equal, None), Terminal(op_arit_sum, None), Terminal(op_arit_sub, None), Terminal(op_logic_smaller_equal, None), Terminal(initial_parenthesis, None)}
First(<CALL>) = {Terminal(initial_parenthesis, None)}
First(<ID'>) = {Terminal(ε, None), Terminal(initial_parenthesis, None)}
First(<TERM>) = {Terminal(string, None), Terminal(reserved_func_print, None), Terminal(reserved_func_write, None), Terminal(char, None), Terminal(reserved_func_input, None), Terminal(reserved_func_read, None), Terminal(number, None)}
First(<FUNCTION_DECLARATION>) = {Terminal(initial_parenthesis, None)}
First(<ATTRIBUTION_DECLARATION>) = {Terminal(end_of_line, None), Terminal(initial_parenthesis, None), Terminal(op_attr, None)}
First(<FUNCTION_CALL'>) = {Terminal(ε, None), Terminal(initial_parenthesis, None)}
First(<SENTENCE_BODY>) = {Terminal(string, None), Terminal(reserved_directive_return, None), Terminal(char, None), Terminal(reserved_type_string, None), Terminal(reserved_func_read, None), Terminal(initial_block, None), Terminal(reserved_type_number, None), Terminal(reserved_type_char, None), Terminal(reserved_directive_if, None), Terminal(id, None), Terminal(reserved_func_print, None), Terminal(reserved_type_void, None), Terminal(reserved_func_write, None), Terminal(number, None), Terminal(reserved_directive_loop, None), Terminal(reserved_func_input, None)}
First(<ATTRIBUTION>) = {Terminal(id, None)}
First(<LOOP'>) = {Terminal(string, None), Terminal(char, None), Terminal(reserved_func_input, None), Terminal(reserved_func_read, None), Terminal(reserved_type_string, None), Terminal(reserved_type_number, None), Terminal(reserved_type_char, None), Terminal(id, None), Terminal(reserved_func_print, None), Terminal(reserved_type_void, None), Terminal(reserved_func_write, None), Terminal(number, None), Terminal(initial_parenthesis, None)}
First(<ALTERNATIVE_CONDITIONS'>) = {Terminal(initial_block, None), Terminal(reserved_directive_if, None)}
